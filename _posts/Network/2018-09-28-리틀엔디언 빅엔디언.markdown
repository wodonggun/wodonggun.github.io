---
layout: post
title: " [IT] 리틀 엔디언, 빅 엔디언 이란?"
subtitle: <span class="evidence"> 리틀 엔디언 vs 빅 엔디언 </span>
date: 2018-01-01
author: NoonGam
category: Study
tags: Network C/C++
comments: true
finished: true
---

---


## 엔디언(Endianness )이란 ?

> 엔디언이란 컴퓨터의 메모리와 같은 1차원의 공간에 여러 개의 연속된 대상을 배열하는 방법을 뜻하며, 바이트를 배열하는 방법을 특히 바이트 순서(Byte order)라 한다.



## 리틀 엔디언 / 빅 엔디언

- 빅 엔디언(Big endian)
1. 최상위 바이트 부터 차례로 저장하는 방식 = MSB = Most Significant Byte
2. 주로 네트워크에서 쓰이며, Unix의 RISC계열의 프로세서가 사용하는 바이트 오더링
3. 장점 : 디버그를 편하게 해준다. 사람이 숫자를 읽는 방식과 같기 때문에

- 리틀 엔디언(Little endian)
1. 최하위 바이트 부터 차례로 저장하는 방식 = LSB = Least Significant Byte
2. x86 아키텍처를 사용하는 대부분의 컴퓨터에서 쓰이며, '인텔포맷'이라고 불림.
3. 장점 : 작은 값을 계산할때 필요없는 메모리 이동을 하지 않는다.<br>

`0x21 값 -> 메모리: 21 00 00 00 -> 앞에 21만 계산함.`<br>
`0x21 값 -> 메모리: 00 00 00 21 -> 메모리 마지막까지 이동 후 21 계산함.`

## 예시

32비트 체계에서 0x12345678(`0001 0010 0011 0100 0101 0110 0111 1000`)

빅 엔디언 = `0x12 34 56 78`<br>
리틀 엔디언 = `0x78 56 34 12`<br>



## 정리

<a>네트워크 상에서는 빅엔디안 방식을 표준으로 사용하고 있으며, 데이터를 받는 쪽이
리틀엔디안 방식이면 리버싱 작업을 통해 재배열 해야 한다. </a>

<a>인텔포맷은 패킷을 보낼때 뒤집고, 받을때 다시 뒤집어서 받는데 이러한 과정을 하는 이유는
CPU ALU연산에서 리틀엔디안 방식이 훨씬 쉽고 효율적이라 선택. </a>

<br><br><br>







<br><br><br>

## 참고 자료
*
*
*
<fieldset id="gpg-fieldset">
 샘플 파일
</fieldset>

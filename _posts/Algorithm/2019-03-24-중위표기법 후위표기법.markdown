---
layout: post
title: " [자료구조] 중위표기법을 후위표기법으로 변환 "
subtitle: <span class="evidence"> C/C++을 이용하여 중위표기법을 후위표기법으로 변환 </span>
date: 2019-03-24
author: NoonGam
category: Algorithm
tags: C/C++ Algorithm
comments: true
finished: true
---

---


## 후위표기법(postfix) ?

> 기본적으로 우리가 알고 있는 `( A + B ) * C`는 피연산자 사이에 연산기호를 표기하는 중위표기법(infix)방법이다.사람에게는 가독성이 중요하지만 컴퓨터는 보기 편한것 보다는 연산속도를 우선시하기 때문에 후위표기법이 스택을 활용하여 연산을 쉽게 할 수 잇다.

<br>

`후위표기법 특징`  
1. 괄호가 없어도 계산 순서가 일정하여
2. 컴퓨터는 중위표기법 계산보다 후위표기법이 빠르다.
3. 계산기나 컴퓨터 내부에서도 스택을 활용하여 중위표기법을 후위표기법으로 변환하여 연산한다.


## 중위표기법을 후위표기법으로 변환




![img](/img/1-Everything/0324_1.PNG)

- 모든 수식을 소괄호로 우선순위가 정해져 있을때  
`(((A+(B/C))*D)/E)`  

```c++
#include <stdio.h>
#include <vector>

using namespace std;

char str[101];
vector<char> stack;

int main()
{

	scanf("%s", &str);

	for (int i = 0; str[i] != '\0'; i++)
	{
		if (str[i] == '(')
		{
			continue;
		}
		else if (str[i] == ')')
		{
			printf("%c", stack.back());
			stack.pop_back();
		}
		else if (str[i] >= 65 && str[i] <= 90)	//대문자 알파뱃일때
		{
			printf("%c", str[i]);
		}
		else				 //연산자 기호일때
		{
			stack.push_back(str[i]);
		}
	}


	while (!stack.empty()) // 스택에 남은 연산자 다 출력
	{
		printf("%c", stack.back());
		stack.pop_back();
	}

	return 0;
}
```

<br><br>



![img](/img/1-Everything/0324_3.png)

-  괄호가 있고, 모든 연산자에 대한 우선순위를 괄호로 묶지 않은경우.  
`A*(A+B)*C`

```c++
#include <stdio.h>
#include <vector>
#include <map>
using namespace std;

char str[101];
vector<char> vec;



int main()
{
	map<char, int> ma;
	//기호별 우선순위
	ma['+'] = 0;
	ma['-'] = 0;
	ma['*'] = 1;
	ma['/'] = 1;
	ma['('] = -1;

	scanf("%s", &str);

	for (int i = 0; str[i] != '\0'; i++)
	{
		if (str[i] == '(') {
			vec.push_back(str[i]);
		}
		else if (str[i] >= 65 && str[i] <= 90)
		{
			printf("%c", str[i]);
		}
		else if (str[i] == ')')     
		{
			while (vec.back()!='(')    //여는 괄호가 나올때까지 pop
			{
				printf("%c", vec.back());
				vec.pop_back();
			}
			vec.pop_back();
		}
		else
		{
			//높거나 같으면 계속뽑음
			while(!vec.empty() && ma[vec.back()] >= ma[str[i]])
			{
				char a = vec.back();
				printf("%c", a);
				vec.pop_back();
			}

      //스택 위에보다 우선순위가 낮으면 푸쉬
			vec.push_back(str[i]);


		}


	}

	//스택에 남은연산 출력
	while (!vec.empty())
	{
		printf("%c", vec.back());
		vec.pop_back();
	}

	return 0;
}

```

<br><br><br>


## 후위표기법 값 계산
![img](/img/1-Everything/0324_2.PNG)

<br><br><br>

---
layout: post
title: " [자료구조] Hash 해쉬테이블"
subtitle: <span class="evidence"> 해시, 해시테이블에 대해 알아보자. </span>
date: 2019-04-12
author: NoonGam
category: Algorithm
tags: Algorithm
comments: true
finished: true
---

---

## 해쉬테이블 ?

> 해쉬테이블이란 검색하고자 하는 `Key값`을 입력받아 `해쉬함수`를 통해 `HashCode`를 생성하고, 그 Hash코드를 배열의 `index`로 환산하여
해당 index에 `값(value)`을 저장합니다.

>> 배열 arr[10]과 같이 index에 int형이 아닌 char,string`(arr["hello"]=10)` 등 다른 자료형도 index로 설정 함으로써 주소에 다이렉트로 접근할 수 있습니다.

<br><br>

## 해시 과정

`Key`->`해시 함수에 Key넣음`->`Hashcode 생성`->`적절한 인덱스 생성`->`해당 인덱스주소에 저장`
->`데이터가 이미 존재하면 = 연결리스트로 연결`  

![img](/img/1-Everything/hash.PNG)

<br><br>



## 해시

- `Hash 알고리즘` = 배열방을 효율적으로 사용하기위한 Hash코드 생성 알고리즘.

- `해시 충돌(Collison)` = 해시충돌 최소 O(1)이지만 최대 O(n)까지 될 수 있음.

- `해시 충돌시?`  
1. 추가될때마다 연결리스트를 통해 구현  
2. 이진 탐색 트리를 통해



## 해시 함수 예시

- 간단하게 아스키코드값을 가지고 hash함수를 구현  

```c++
int getHashCode( sun )
{
	//sun이라는 key값을 받아 아스키코드값을 더함.
	s(115) + u(117) + n(110) = 342

	//생성된 해쉬코드를 문자길이로 index 환산
	342 % 3 = 0;

	return 0;	//index 0번을 리턴
}

```

<br><br>

## Hash와 Map의 차이점

- Hash
1. 자료 탐색에 Hashing을 이용한다.
2. Key와 Value로 빠른 탐색속도를 보장한다. ( 시간복잡도 O(1) )
3. 내부 데이터를 자동으로 정렬하지 않는다.

- Map
1. 자료 탐색에 이진 탐색 트리를 사용한다. (Red-Black Tree)
2. Key와 Value로 Hash보다 조금 느리다. ( 시간복잡도 O(logn) )
3. 내부 데이터를 자동으로 정렬.

<br><br><br>

---
layout: post
title: "선택 정렬 알고리즘 - Selection Sort"
subtitle: <span class="evidence">선택 정렬에 대해서 알아보자.</span>
date: 2018-09-23
author: NoonGam
category: Algorithm
tags: Algorithm C/C++
comments: true
finished: true
---



## Selection Sort - 선택 정렬

---

<br>

![img](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Selection_sort_animation.gif/220px-Selection_sort_animation.gif)
<center>[선택 정렬 알고리즘 애니메이션]</center>


> 선택 정렬은 첫 번째 자료를 두 번째 자료부터 마지막 자료까지 차례대로 비교하여 가장 작은 값을 찾아 첫 번째에 놓고,
두 번째 자료를 세 번째 자료부터 마지막 자료까지와 차례대로 비교하여 그 중 가장 작은 값을 찾아 두 번째 위치에 놓는 과정을 반복하며 정렬을 수행한다.

<br><br><br>


## 동작


![img](/img/0-Algorithm/2018-09-23-선택정렬/Selection-Sort-Animation.gif)



> <a> 8 5 2 6 9 3 1 4 0 7 </a> <br><br>간단하게 8번이 있는 `첫번째 자리`를 선택하고 -> 1~10번째까지 가장 작은 수 전체 탐색 <br>
0(9번째자리)이 가장 작으므로 첫번째와 9번째자리를 바꿈. (1 싸이클)
<br><br>
5번이 있는 `두번째 자리` 선택하고 -> 2~10번째까지 가장 작은 수 전체 탐색<br>
1(7번째자리)이 가장 작으므로 두번째와 7번째자리를 바꿈. (2 싸이클)<br><br>
2번이 있는 `세번째 자리`를 선택하고 -> 3~10번째까지 가장 작은 수 전체 탐색<br>
2번이 있는 세번째 자리가 가장 작으므로 그냥 그대로 유지 (3 싸이클)<br><center>.</center><center>.</center><center>.</center><br>  <center>`마지막 N번째 자리까지 반복`</center>

<br><br><br>



## 선택 알고리즘 동영상(참고)

<iframe width="650" height="345" src="//www.youtube.com/embed/Ns4TPTC8whw"
 frameborder="0" allowfullscreen></iframe>

- 유튜브에 보니 선택 알고리즘을 쉽게 보여주는 포크댄스가 있네요...ㅎㅎ

<br><br><br>


## 소스코드


```c
#include <stdio.h>

int main()
{
	int n = 10;
	int arr[10] = { 8,5,2,6,9,3,1,4,0,7 };   //무작위 배열

	for (int i = 0; i < n; i++)		 	//i번째 자리 선택
	{
		int min_pos = i;				
		for (int j = i + 1; j < n; j++)   //i번째 이후 탐색 시작
		{
			if (arr[min_pos] > arr[j])	//i번째 자리에 들어갈 최소자리 찾기
			{
				min_pos = j;
			}
		}

		//최소자리 찾기 for문 종료후에 i번째 위치에 최소값 자리 스왑
		int temp = arr[i];
		arr[i] = arr[min_pos];
		arr[min_pos] = temp;

	}
	for (int i = 0; i < n; i++)
		printf("%d ", arr[i]);
  printf("\n");
}
```
<br><br><br>

## 실행 결과

![img](/img/0-Algorithm/2018-09-23-선택정렬/2.PNG)


<br><br><br>

## 정렬 알고리즘 시간복잡도 비교

![img](/img/0-Algorithm/2018-09-23-선택정렬/1.png)

- 시간복잡도가 최악이고, 비효율적인 방법<br>
- 알고리즘이 단순하여 구현이 쉽고, 메모리가 제한적인 경우에 사용시 성능 상의 이점.
<br><br><br>

## 참고 자료
* https://gmlwjd9405.github.io

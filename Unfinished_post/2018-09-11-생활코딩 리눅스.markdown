  ---
layout: post
title: " -------- "
subtitle: <span class="evidence"> -------- </span>
date: 2018-01-01
author: NoonGam
category: Study
tags: Network Linux
comments: true
finished: true
---



## 1일차

- `ls` 현재디렉토리 목록 보기
- `pwd` 현재 위치 표시
- `mkdir` 디렉토리(폴더) 생성
- `mkdir -p` 여러 디렉토리 생성 가능
$mkdir -p dir1/dir2/dir3/dir4

- `/`  절대(루트)경로경로
- `./` 상대(현재)경로


- `ls --help` ls명령어 도움말
- `rm` 파일 삭제
- `rm -r` 디렉토리 삭제(내부파일까지)



- --help와 man의 차이
> help는 간단하게 출력 man은 메뉴얼 파일을 열음.


- `/문자` 해당문자 찾기
- `n` 다음 문자 찾기
- `shift+n` 이전 문자 찾기




<br><br><br>

## 2일차

- `sudo apt-get update`
- `sudo apt-get upgrade`
- `sudo apt-cache search 파일명` apt-get 설치 가능한 목록 보기



- `apt-get install 파일명` 파일 설치
- `apt-get remove 파일명`  파일 실행



- `wget URL(https://www.sadf.com/asdf.jpg)`
- `wget --help`
> Usage: wget [OPTION]... [URL]... 이라고 쓰여있으면
wget하고 -o(옵션값)을 넣고 URL을 쓰라는 지시


- `wget -O /home/user/Downloads/test.jpg https://wodonggun.github.io/img/homepage/main2.jpg`
main2.jpg URL 이미지를 home/user/Downloads의 디렉토리에 test.jpg로 저장하기




## 3일차

깃 가져오기
- `$git clone https://github.com/wodonggun/BOJ.git` 깃명령어로 해당 git을 복제하여 가져옴

<자세히 git 공부하기>
https://opentutorials.org/course/1492

---------

CLI VS GUI

GUI는 리소스, CPU 자원, 메모리 차지하고 어떠한 명령을 처리하기위해서 다른 그래픽작업과 부가적인 연산이 필요로 한다.
CLI를 통해 한번의 명령으로 여러개의 명령어 실행이 가능하다.
- `mkdir history;cd history;touch his.txt`  3개의 명령어를 한번에 처리 가능하다.



## 4일차

- `ls -l > result.txt`  ls -l 명령어를 통해 콘솔창에 출력되야할 문자를 result.txt로 저장해서 보관

![img](/img/2018-09-11-생활코딩 리눅스/1.jpg)

> ls -l을 통해 Command-Line Arguments로 매개변수 보내줌

> standard output은 결과값을 나타내고, error또한 중요하게 생각되어 따로 output으로 출력함.

- `>` redirection= standard output 방향을 바꿈.(1이 생략됨)
- `1>` redirection= standard output 방향을 바꿈.


- `2>` redirection= standard error output 방향을 바꿈.


- `rm rename2.txt 1> result.txt 2> error.log` 결과는 result.txt로 에러는 error.log로 저장.




----------

- `cat < hello.txt` command line input이 아닌 `<`를 통해 standard input으로 hello.txt 내용을 입력함.


- `>>` redirection= standard output 방향을 바꾸고 입력을 뒤에 붙여서 쓴다.

- `ls -al > /dev/null`  ls -al 의 output값을 /dev/null(쓰레기통같은 저장소)로 리다이렉션을 통해 걍 날려버림  




## 5일차

<a> SHELL VS Kernel </a>

![img](/img/2018-09-11-생활코딩 리눅스/2.jpg)
1. 쉘은 사용자가 명령어를 입력하면 해석하고 커널이 이해할 수 있는 언어로 번역
2. 하드웨어가 처리 가능한 언어로 변경
3. 하드웨어는 결과를 커널에 알려줌
4. 커널은 다시 쉘에게 알려주고 사
용자에게 출력해줌.

커널과 쉘을 구분하는 이유 -> 쉘로 만들어진 프로그램은 다양하게 만들어져서 사용자가 선택하여 사용할 수 있다.(같은 vi 편집기라도 vim,nano등 다양한 편집기를 선택하여 사용할 수 있다.)

----------

<a> bash 쉘 vs zsh 쉘 </a>
그냥 다른 종류의 쉘이다.




```

#!/bin/bash
if ! [ -d bak ]; then
        mkdir bak
fi
cp *.log bak

```

- `#!/bin/bash` #!로 /bin/bash라는 쉘로 실행된다는것을 명시
- if로 열고 fi로 블럭 나눔
- `cp *.log bak` log파일 전체를 bak디렉토리에 복사  
- `chmod +x backup`
x = executable(실행가능한 파일로)













# 디렉토리


![img](/img/2018-09-11-생활코딩 리눅스/3.png)

1. `/  -> Root` 루트디렉토리로 모든 디렉토리의 시작

2. `/bin` User Binaries


3. `/sbin`  -> System Binaries

4. `/etc`   -> 동작하는 프로그램의 설정을 바꾸고 싶을때

5. `/dev`

6. `/proc`

7. `/var` 가변 파일 디렉토리. /var/log의 시스템 로그나 /var/email의 이메일 /var/www 홈페이지 등 가변 파일을 보관한다

8. `/tmp` 임시 파일들이 보관된다. 시스템이 리부트될 때마다 제거 됨.

9. `/usr` 더이상 거의 사용하지않는 디렉토리
- 일반적으로 설치하는 프로그램은 user에 설치되고
- 유닉스에서 제공하며 번들형태로 설치되는 프로그램은 bin이나 sbin에 설치됨.
- 예전에는 플로피디스크를 여러개 설치해야 해서 usr을
- 컴퓨터를 킬때 필요한건 bin, 나중에 필요한건 usr/bin에 저장
- usr/bin에 필요한 파일들은 이제 home 디렉토리로 옴겨짐

10. `/home` 홈 디렉토리. 보통 사용자의 개인 파일을 유저 별로 나누어 디렉토리에 각각 보관한다.

11. `/boot`

12. `/lib`

13. `/opt`




## 프로세스

<a>Process</a>
> 사용자가 입력하는 명령어(Command)를 처리.
특정 목적을 수행하기위해 메모리에 적재되어 프로세서에서 실행중인 프로그램을 말합니다.

- cpu = processor

- ram = memory

- ssd,hdd = storage

----------

- $ps 실행중인 프로그램 조회

- $ps aux 백
그라운드 등 모든 프로그램 조회

- $ps aux | grep apache2

- $sudo kill 22142


## 검색

- `locate *.log`  log파일 전체 조회(데이터베이스 조회)
정리해둔 파일을 읽어오기 때문에 빠르게 조회 가능

- `mlocate` - locate가 조회하는 db 이름

- sudo updatedb(파일들의 정보를 정리해둔 db 최신화)



- `find . -name test`


- `find . -type f -name "tecmint.txt" -exec rm -f {} \;`



$PATH
ls 명령어는 현재 위치에 파일이 없는데 어떻게 명령어를 실행할까?

$ echo $PATH를 통해 유닉스자체 설정되어있음.(환경변수)



## 백그라운드 실행

- `ctrl+z`  종료가아니라 백그라운드 상태로 돌입함.


- `fg` 백그라운드 다시 foreground로

- `$ jobs` 프로그램 실행 상황 보기

- `kill -9 %2`  jobs를 통해 조회한 2번째 프로그램 종료


## 데몬이란

> 계속 실행되어야하는 서버

/etc/rc5.d 이동후 $ ls -l

S로 시작하면 OS가 부팅되면 자동으로 스타트
K는 자동 스타트를 안함.




## CRON

특정시간마다 명령어 실행하기

$ cronetab -e

맨 하단에 `*/1 * * * * date >> date.log 2>&1`   (에러가 났을떄는 error 출력번호 2번을 std출력 1번으로 리다이렉션함)


- `tail -f date.log`  date.log에 맨끝줄에 데이터가 입력되면 새로 추가된 부분만 출력


## alias 명령어 설정
- $ alias l='ls -al'
- $ alias ..='cd ..'
- $ alias c='clear'

- vi .bashrc에서 맨 하단에 `echo 'hello,bash'` 를 치고 닫으면
접속할때마다 hello bash를 보여줌.(exit로 재접속)


## 다중사용자
- `$ who` 현재 접속 사용자 보여줌
- `ssh -p 3022 egoing@localhost`를 통하여 원격접속




## root vs user

일반 사용자일때 루트권한으로 어떤 명령어를 실행할때 sudo를 사용
user@user-virtualbox : $sudo apt-get update;

- `sudo passwd -u root` 루트 접속 허용
- `sudo passwd -l root` 루트 접속 lock


## 사용자 추가

sudo useradd -m duru

sudo passwd duru

su - duru


-----

sudo adduer user2 sudo

sudo usermod -a -G sudo user2



## 사용자 권한

-rw-rw-r-- 1 user user 0 Dec 4 23:19 perm.txt
- `-`rw-rw-r-- 1 user user 0 Dec 4 23:19 perm.txt
type
- -`rw-rw-r--` 1 user user 0 Dec 4 23:19 perm.txt
엑세스모드

- -rw-rw-r-- 1 `user user` 0 Dec 4 23:19 perm.txt
owner group

- -`rw-`rw-r-- 1 user user 0 Dec 4 23:19 perm.txt
owner

- -rw-`rw-`r-- 1 user user 0 Dec 4 23:19 perm.txt
group 권한

- -rw-rw-`r--` 1 user user 0 Dec 4 23:19 perm.txt
다른 모든 접근자 권한

- 권한 주기 `chmod 777 파일명`
-          `chmod o+r 파일명`  다른 사용자(others)에 +r 리드권한 부여
-          `chmod o+w 파일명`




## 그룹

- groupadd developer

- sudo !! (이전에 실행했던 명령어 다시 실행)

- usermod -a -G developer user2   (user2를 그룹 developer에 넣음)




chown - 소유자랑 그룹 변경
chgrp - 그룹 변경

- 해당폴더로 이동후 `sudo chown root:developer .`  root 그룹을 developer 그룹으로 변경.




## 서버

`client - Server`

google.com 입력 -> DNS server에 google.com의 ip주소 요청 -> DNS server는 데이터베이스 조회 후 응답 -> client에서 ip를 가지고 google 서버에 html 요청함 -> google 서버에서 html 데이터를 뿌려줌(응답)







## 웹서버 만들기

- apt-get update;
- apt-get install apache2;
그리고 아파치 설치후에 서버를 실행해줘야함.
- service apache2 start

- htop으로 프로세스 실행중인거 확인하면 apache2 검색 -> apache2 실행중인 파일이 많다
이유 : 요청이 많으면 하나만의 프로세스로는 병목현상이 일어날 수 있으므로, 여러개가 실행되어있고, 요청이 계속 많아지면
apache2 프로세스가 점점 많아지거나 적어지면 줄어듬.


- vi /etc/apache2/sites-enabled 에 들어가서 000-default.conf를 보면 /var/www/html 로 index.html 기본 루트가 정해져있음.

- vi /etc/log/apache2/access.log 파일을 보면 접속 로그가 나옴.
여기에  tail -f access.log를 하면 누군가 접속할때마다 cat 해줌.



## ssh 원격 접속

1. 서버 컴퓨터에는 apt-get install openssh-server openssh-client
2. 클라이언트 컴퓨터에는 apt-get install openssh-client
3. 서버컴에서 service ssh start
4. 클라이언트 컴퓨터에서는 ㅇ
5. ssh user@아이피주소 -> 비번입력 -> 접속 완료


## 포트포워딩

- 강의 3번 추후 퍼블릭 아이피로 응용해보기.   
https://opentutorials.org/course/2598/14470


## ㅎㅇ

<a> DNS 요청 순서 </a>

```
 google.com 입력 -> /etc/hosts에 해당 주소가 있는지 검색 -> 없으면 DNS 서버로 IP 주소 요청
                                                         -> 있으면 해당 hosts파일에 IP주소로 검색
```


## 무료 도메인 사용 방법


[강의 3번 참고] https://opentutorials.org/course/2598/14471


1. `$ curl ipinfo.io/ip`   ->  public IP 조회  
my.freenom.com 을 통해서 free 사용 가능




cat /etc/resolv.conf  DNS Server IP주소가 저장되어있는 파일 (VM일떄는 127.0.0.53 등 다름, 퍼블릭 일때는 DNS주소가 나오는데 google검색으로 정보 조회 가능)




--------

- 서브도메인을 통해 하나의 IP로 여러개의 도메인 가능

1. egoing.ga
2. admin.egoing.ga
3. blog.egoing.ga
4. new.egoing.ga 등 가능




## DNS 추적


- `dig +trace 주소`  앞에 공유기나 라우터가 있으면 안됨



1. 클라이언트 egoing.ga 요청 ->DNS server는 root(ga,com,net)가 누가 담당하는지 root dns server에 요청 ->
root dns server는 ga 루트에 대한 dns 관리자 정보를 응답 ->



## 파일 동기화 rsync

- apt-get install rsync

- su - user

- `touch test{1..10}`  test파일 1 ~ 10번까지 한번에 생성

rsync 는 증분 백업을 한다 = 늘어나거나 줄어든 파일만 다시 전송함(백업함)

- `rsync -a src dest`    dest폴더 내부에 src라는 폴더(백업할 폴더)가 생성함(동기화)
- `rsync -a src/ dest`  dest폴더 내부에 src폴더 내부의 파일들을 생성함(동기화)

- `rsync -av src/ dest` 변경된 파일만 전송함(어떤게 추가/삭제되었는지 정보와 함께)



## 네트워크 rsync 동기화

- `rsync -azP ~/rsync/src/ user@192.168.0.55:~/rsync/dest`



## key를 통한 ssh 접속

- `ssh-keygen` 키 생성

-  ~/.ssh로 이동하면 id_rsa와(private키) id_rsa.pub(public키)

## key gen을 통해 rsync

A컴퓨터와 B컴퓨터를 네트워크를 통해 B컴퓨터에 백업을 하려면
매번 rsync할때마다 비밀번호를 입력해야함 -> key gen을 통해 비밀번호없이 로그인 가능하게 사용


- `RSA 알고리즘`
client는 server로 접속요청 -> server는 client로 random key 보냄 -> client는 privatekey를 통해 암호화 후 전송 -> server는 암호화된것을 public키를 통해 다시 복호화-> 복호화된 결과가 처음에 전송한 랜덤키와 값이 같다면 인증 완료


## 정리

CLI = gui에 비해 속도나 메모리를 적게 먹고, 한번에 여려 명령어를 동시에 수행 가능

- mkdir test`;`touch test.txt = 앞의 명령어의 성공,실패 여부 없이 무조건 다음 명령어도 실행

- mkdir test`&&`touch test.txt = 앞의 명령어가 성공했을때만 뒤에 명령어 실행

- mkdir test`&`touch test.txt = 앞 뒤 명령어가 동시에 실행됨(백그라운드로 동작시키고자할때 사용ㅇㅇ)


## 참고 자료
* [생활코딩] https://opentutorials.org/course/2598/14204



<br><br><br>

---
layout: post
title: " -------- "
subtitle: <span class="evidence"> -------- </span>
date: 2018-01-01
author: NoonGam
category: Study
tags: Network Linux
comments: true
finished: true
---

---

## 1일차

```
1. Processor
- CPU(연산장치)
- Process랑 다름(저장소->RAM에 프로그램이 올라간 상태를 Process라고 함)

2. Memory
- RAM 메모리
- HDD,SDD 등 저장소

3. I/O
- 마우스, 키보드, 마우스



Fetch = 메인 메모리에 올라온 명령어를 CPU가 한줄 한줄 읽어온다.
Decode = 가져온 명령어를 해석
Execute = 실행


OS 종류
Dos - Disk Operating System
Unix
Linux
MS Windows
MAC OS

GUI(Graphic User Interface)
CLI(Command Line Interface)




고급 언어 - 사람이 사용하는 자연어와 가장 유사한 언어
          portable(하드웨어에 독립적이라 호환성 좋음)
저급 언어 - 어셈플리(기계어를 좀더 알아보기 쉽게 매칭), 기계어(0,1로만 표기)
          not portable(호환성이 구림)



1. 고급언어 -> 컴파일러 -> 어셈블리어 -> 기계어 해석기
2. 고급언어 -> 인터프리터(베이직 언어 사용할때 사용되었음=현재는 사용하지 않음))

자바의 장점 = Unix, windows, mac 어디에서든 작성하고 컴파일하면 어떠한 타입의 컴퓨터에서도
실행 가능합니다.


Java 코드작성 -> Java Compiler -> Java ByteCode -> 1. JVM for intel
                                                -> 2. JVM for Mac
                                                -> 3. JVM for Unix
자바 컴팡일러는 컴파일에러를 체크하고, 바이트코드를 생성한다.




- 인터넷/웹
서블릿
JSP(Java Server Page) - 상당 부분이 자바랑 거의 비슷함
스프링(자바를 기반으로 웹페이지 개발) -
스트럿츠(자바를 기반으로 웹페이지 개발) -  
전자정부프레임워크(자바를 기반으로 웹페이지 개발) - 국내에서 개발된 공공웹사이트 개발 툴




```




## 2일차


```
자바에서는 포인터가 사라졌지만, Reference라는 것이 존재.

char c = '\u0061' 유니코드 61번째(a) 선언

유니코드 - 모든 글자를 2바이트 표시(HTML에 호환 불가,)
UTF-8 - 영문,숫자,기호는 1바이트로, 한글과 한자는 3바이트로 표현
전세계 모든글자를 표현 가능

윈도우에서는 유니코드 2번 사용
리눅스,유닉스,오픈소스에서는 유니코드1번 또는 UTF-8(유니코드3번)을 기본으로 사용.

float형은 끝에 선언과 동시에 값에 f를 붙여줘야함.
정수일때는 안붙여줘도 되지만 소수점자리가 있을때는 붙여줘야함



■ 시프트 연산자
> 비교 연산자
>> 시프트연산자(부호비트는 무시)
>>> 시프트연산자(부호비트도 시프트시킴)




int[] score = new int[4];    or    int score[] = new int[4];

int[] score = {1,2,3,...,24)};

배열 = 레퍼런스타입 = 참조타입(메모리를 가리킴)


garbage colector(GC) = int[] score = {10,20,30,40{}을 선언하고
  다시 score = new int[5];라고 재선언 하게되면 배열 자리를 다시 할당하고
  원래 10,20,30,40이 있던 배열은 GC에 의해서 사라지게됨.


- 2차원 선언을 하고, 필요할때 뒤에 할당
int [][] score;
score = new int[20][];
score[0] = new int[4];
score[1] = new int[4];
score[19] = new int[4];



public static int sum(int i, int j)
public 접근제한자
static 전역사용
sum 메소드 네임
int 리턴 타입
int i,int j 파라미터


----
<레퍼런스 swap>

int [] num = {10,20};
swap(num)

public static void swap(int[] arr)
{
int temp = arr[0];
arr[0] = arr[1];
arr[1] = temp;
}
----



```




## 3일차

```
객체지향기술 = 소프트웨어 부품화,컴포넌트의 재사용을 주요 목표

클래스 = 속성(변수?) + 행위(메소드=함수)

객체 = 효율적으로 정보를 관리하기 위해서 사람들이 의미를 부여하고 분류하는 논리적인 단위
실세계에 존재하는 모든것이 될 수 있으며, 명사로서의 성질을 갖춘 모든 것은 객체로 만들어질 수 있다.

객체 장점
1. 문제를 쉽고 자연스럽게 모델링 할 수 있다.
2. 프로그램 모듈을 재사용 할 수 있다.
3. 프로그램의 확장 및 유지 보수가 용이
4. 쉬운 프로그램의 개발로 인한 생산성 향상

클래스 = 객체를 생성하는 형판

객체는 항상 클래스로부터 생성된다.

클래스로부터 생성된 객체를 instance라고 한다.


생성자 = 객체 생성시 호출되는 메소드(초기화 용도)

     객체이름     생성자 호출
  Dog myDog = new Dog()
객체종류    객체생성   

< this 사용 예 >
this.변수명 = 멤버필드나 메소드를 명확히 지시
b.swap(this) = 필드내의 객체 전체를 매개변수로 전달할때
this() = 현재 클래스의 다른 생성자를 호출.

transient 변수 = 디스크에 저장할때 transient는 저장하지 않음.



<a>this 키워드</a>
1. 자기 자신의 멤버변수를 명시하기위해
2. 객체 전체를 함수의 매개변수로 전달해야 하는 경우

this()
1. 생성자에서 this()사용은 다른 생성자를 호출하는 형태
public Circle(){
  this(0);
}

public Circle(int r)
{
  this.r = r;
}



컴파일러가 자동으로 생성자 초기화 함수를 만들어준다.
ABC클래스이면 자동으로 ABC(){ }를 자동으로 생성해줌.


메소드 규칙
1. 메소드가 같은 클래스 혹은 상위클래스가 존재해야 함.
2. 메소드의 이름이 클래스와 같아야함.
3. 메소드의 파라미터개수가 다르거나 데이터형이 달라야 함.
4. 리턴형은 같아야하고, 달라도 됨.


super() 상하관계에서 상위 메소드 호출
this() 동등한관계에서 생성자 호출



1. 쓰레딩
자바 = 우선순위(priority)와 순활 할당(Round-robin) 방식을 사용

우선순위 default = 5 최대 = 10   최소 = 1

2. Mutual Exclusive



3. wait 스레드를 멈춤

`sleep`과 `wait`의 차이점 = sleep은 쓰레드를 멈추고, wait은 멈추지만 다른 쓰레드가 깨워줄때까지 대기한다.


4. notify  = wait상태의 스레드를 임으로 깨움
   notifyAll = 모든 스레드를 깨움



```


## Exception

String char 차이
String = 클래스





char = primitive 타입
```
Type        Bits      Range of Values
----------------------------------------------------------------------------------------
byte         8bits    -2^7 ~ 2^7-1 (-128 ~ 127)
short       16bits    -2^15 ~ 2^15-1 (-32768 ~ 32767)
int         32bits    -2^31 ~ 2^31-1 (-2147483648 ~ 2147483647)
long        64bits    -2^63 ~ 2^63-1 (-9223372036854775808 ~ 9223372036854775807)
float       32bits    0x0.000002P-126f ~ 0x1.fffffeP+127f
double      64bits    0x0.0000000000001P-1022 ~ 0x1.fffffffffffffP+1023
char        16bits    \u0000 ~ \uffff (0 ~ 2^15-1) * 자바에서 unsgined로 동작하는 자료형
boolean      1bit     true, false
```









## 추상화

현실()

관심가질만한 데이터를 중심적으로 직관적으로 표현하는 행위(디자인 추상화)

반영해야할 사실을 소프트웨어적으로 좋게 설계하는것(소프트웨어 추상화)




## 정리

Scope(스코프) = 유효범위 = 변수적용범위

## static변수, 변수(필드) 차이

클래스 변수를 static변수로 선언하면 인스턴스를 여러개를 만들어도 static변수 하나로 공유하여 사용한다.



## 접근제어자

public 모두

protected 다른패키지에서 상속관계가 아닐때 보호 (퍼블릭과 동일하지만)

default 같은패키지만 가능

<<<<<<< HEAD
private 같은클래스말고 다 접근 불가
=======
private 같은클래스말고 다 접근 불가 
>>>>>>> f93cd6ba5841404d08eb9b1fae654e3da3afe688





<<<<<<< HEAD
## 추상클래스 != 추상화

클래스의 선언만하고, 상속받아서 사용하는 사람에게 동작 설계를 맡김.

동작과정을 정하기만하고 필요한 메소드는 사용자가 만들어서 동작하도록 강제함.


## 디자인패턴


## final

변수 = 선언과 동시에 값을 주고, 변경 불가
메소드 = 해당 메소드 오버라이딩 불가
클래스 = 상속을 못하게 함(금지)

## 인터페이스

상속은 상위 기능을 하위에서 물려 받는 것이라면,
인터페이스는 하위클래스에 특정 메소드를 강제하도록 제한.

1. 다중상속 안하는 이유
```
class MyVehicle extends car, plane {
    @Override
    public void goTo(){
        super.drive();    
    }
}
```
위와 같이 car와 plane을 두개 상속받았는데 두개다 drive라는 클래스를 가지고 있다면 누구의 drive메소드를 호출해야하는지
애매함이 생김.

2. 인터페이스와 상속의 차이


3. 추상클래스와 인터페이스의 사용 상황
- Draw와 같이 같은 종류의 행동들을 구현할게 많을때 자식에게 떠맡김.(변수와 메소드를 쓸수있음)

- 인터페이스는 전체적인 로직과 메소드 형태만 서로 공유해서 구현되는 상황일때 동시다발적으로 각 모듈을 개발할 수 있다.



## 다형성
1. A obj = new B(); 일때 B를 인스턴스화 했지만 A의 메소드만 사용 가능하다.
2. A obj = new B(); 하지만 B에서 A의 클래스를 x를 오버로딩했으면 A의 x메소드를 호출해도 오버로딩된 B의 x메소드가 호출된다.

3. 매개변수를 넘길때 매개변수의 자료형을 부모클래스로 선언함으로써, 부모를 상속받은 B,C클래스 등 아무거나 넘길 수 있다.
4.



## 예외처리

Exception = 최상위 예외처리(모든경우 커버 가능)
xxxxException = Exception의 하위 예외처리 (세분화 가능)

try{

}catch(xxxException e){
  "xxx에 관련된 예외처리만 걸러냄"
}catch(Exception e){
  "위에 예외에서 안걸린 나머지 모든걸 처리"
}

- throw를 통해 더이상 진행하지않음.
if(right == 0){
          throw new IllegalArgumentException("두번째 인자의 값은 0이 될 수 없습니다.");
}


## string
equals , == 차이

`==` 주소가 같은지
`equals` 같은 객체인지


## clone
A객체 a랑 똑같은 객체를 복사하고 싶을때
기본적으로는
A a = new A();
A b = a;           <------- 이건 주소값을 넣는거기 때문에 똑같은 메모리를 바라보게함.


```
class A implements Cloneable{
		String name = "hahaha"
	protected Object clone() throws CloneNotSupportedException{
        return super.clone();
    }

}

public class test{

	public static void main(String args[])
	{
		A a = new A();
		A b;
		try {
			b = (A)a.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
	}

}
```
위와 같이 clone을 구현하여 사용하면 주소가 다르지만 원래 가지고있던 변수정보나 메소드는 똑같은 객체를 복제하게 된다.



## 상수와 enum

interface내부의 변수는 public ifnal static 값이 된다.
interface FRUIT{
  int APPLE =1, PEACH =2, BANANA = 3;
}

enum Fruit{
  APPLE,PEACH,BANANA        ==              public static final Fruit APPLE  = new Fruit();
                                            public static final Fruit PEACH  = new Fruit();
                                            public static final Fruit BANANA = new Fruit();
}

## 제네릭
- 자료형을 미리 선언하지않고, 유동적으로 받을 수 있다.
class info<T>{

}

기본 데이터 타입 = char,int,double, float

레퍼런스 = Integer,Double;



1. 생성자 또는 변수를 제네릭화 하는 방법
EmployeeInfo e = new EmployeeInfo(1);
Integer i = new Integer(10);
Person<EmployeeInfo, Integer> p1 = new Person<EmployeeInfo, Integer>(e, i);   ->    Person p1 = new Person(e,i);

2. 메소드를 제네릭화 하는 방법
public <U> void test(U info){
  System.out.println(info);
}

제네릭 5강은 다시들어야됨.


## 컬렉션 프레임워크

1. ArrayList

2. Set 중복 허용x (집합 포함여부 확인가능)

3.
=======


>>>>>>> f93cd6ba5841404d08eb9b1fae654e3da3afe688



## 참고 자료
* [최민 교수님](God!)

*
*
